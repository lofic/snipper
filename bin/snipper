#!/usr/bin/ruby

require 'rubygems'
require 'snipper'
require 'thor'

class MyCLI<Thor
  desc "add [FILE1..5]", "add a snippet"
  long_desc <<-D
  There are various ways to add a new snippet:

  To add a number of PHP files to a single snippet:

  $ snipper add file1 file2 file3 file4 file5 --lang=php

  To create a new snippet with a file from STDIN:

  $ cat files1 | snipper add

  There is also a shortcut for supplying files from STDIN:

  $ cat file1 | snipper
  D
  option :syntax, :desc => "Language to use for the new snippet", :default => "ruby", :type => :string, :aliases => ["-l", "--lang", "-s"]
  option :description, :desc => "Textual description for this snippet", :default => nil, :type => :string, :aliases => ["-d"]
  def add(file1=nil, file2=nil, file3=nil, file4=nil, file5=nil)
    puts Snipper::Util.new([file1, file2, file3, file4, file5].compact, options["syntax"], options["description"])
  end

  desc "append [SNIPPET] [FILE1..5]", "appends a file to an existing snippet"
  long_desc <<-D
  Appending works similar to adding except you must known an existing snippet number:

  $ snipper append 123 file1 file2 file3 file4 file5 --lang=php

  $ cat file1 | snipper append 123
  D
  option :syntax, :desc => "Language to use for the new snippet", :default => "ruby", :type => :string, :aliases => ["-l", "--lang", "-s"]
  option :description, :desc => "Textual description for this snippet", :default => nil, :type => :string, :aliases => ["-d"]
  def append(snippet, file1=nil, file2=nil, file3=nil, file4=nil, file5=nil)
    puts Snipper::Util.append(snippet, [file1, file2, file3, file4, file5].compact, options["syntax"], options["description"])
  end

  desc "capture", "Captures the output of a command as a snippet"
  long_desc <<-D
  Captures the output of a unix command to a snippet

  $ snipper append -l text -d 'some description' 'ls -l'

  Alternatively you can if you do not supply a command you will receive a prompt

  $ snipper append -l text -d 'some description'
  command > ls -l
  D
  option :syntax, :desc => "Language to use for the new snippet", :default => "ruby", :type => :string, :aliases => ["-l", "--lang", "-s"]
  option :description, :desc => "Textual description for this snippet", :default => nil, :type => :string, :aliases => ["-d"]
  def capture(*command)
    if command.empty?
      require "readline"
      line = Readline.readline('command> ', true)
      puts Snipper::Util.capture(line, options["syntax"], options["description"])
    else
      puts Snipper::Util.capture(command.join(" "), options["syntax"], options["description"])
    end
  end

  desc "delete [SNIPPET]", "deletes an existing snippet"
  def delete(snippet)
    Snipper::Util.delete(snippet)
  end

  desc "edit [SNIPPET]", "edits an existing snippet"
  def edit(snippet)
    puts Snipper::Util.edit(snippet)
  end

  desc "view [SNIPPET]", "views an existing snippet"
  def view(snippet)
    puts Snipper::Util.view(snippet)
  end

  desc "search [STRING]", "Search snippets"
  def search(string)
    Snipper::Util.search(string)
  end

  desc "languages", "list known languages"
  def languages
    Snipper::Util.list_langs
  end

  default_task :add
end

MyCLI.start(ARGV)
